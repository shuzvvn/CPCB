Genomics_Project.01.txt

Shu-Ting Cho <shutingc@andrew.cmu.edu>


<date>2022/04/18</date>

# download the fasta files
cd /mnt/g/My Drive/0_Genomics/Genomics_Project

vim accession.txt
GCF_002591665.3
GCF_002943835.1
GCF_003666425.1
GCF_003666445.1
GCF_003666465.1
GCF_003667905.1
GCF_003667925.1
GCF_005221325.1
GCF_005221345.1
GCF_005221385.1
GCF_005221405.1
GCF_005221425.1
GCF_014489975.1
GCF_016403145.1
GCF_017726655.1


ncbi-genome-download --formats fasta -A accession.txt bacteria

mkdir /mnt/g/My\ Drive/0_Genomics/Genomics_Project/fasta.gz

mv /mnt/g/My\ Drive/0_Genomics/Genomics_Project/refseq/bacteria/*/*.fna.gz /mnt/g/My\ Drive/0_Genomics/Genomics_Project/fasta.gz/



<date>2022/04/20</date>

# try de novo assembly tools to generate repeat elements
cd /Volumes/GoogleDrive/My Drive/0_Genomics/Genomics_Project/Swapnil_Samplefast
grep -c '>' *.fasta
original.fasta:191202
shuffled.fasta:193048
test01.fasta:50


mkdir /Users/stc/genomics_project/kmers/
cp /Volumes/GoogleDrive/My\ Drive/0_Genomics/Genomics_Project/Swapnil_Samplefast/test01.fasta /Users/stc/genomics_project/kmers/


### install SPAdes ###
# https://cab.spbu.ru/files/release3.15.4/manual.html#sec2.2
cd /usr/local
sudo curl http://cab.spbu.ru/files/release3.15.4/SPAdes-3.15.4-Darwin.tar.gz -o SPAdes-3.15.4-Darwin.tar.gz
sudo tar -zxf SPAdes-3.15.4-Darwin.tar.gz
sudo ln -s /usr/local/SPAdes-3.15.4-Darwin/bin/spades.py /usr/local/bin/spades.py

# run SPAdes
mkdir /Users/stc/genomics_project/SPAdes
cd /Users/stc/genomics_project/SPAdes

spades.py --only-assembler --careful -s /Users/stc/genomics_project/kmers/test01.fasta -o /Users/stc/genomics_project/SPAdes/
# fail, no result



### install Velvet ###
conda install -c bioconda velvet

# run velvet
mkdir /Users/stc/genomics_project/velvet
velveth /Users/stc/genomics_project/velvet 3 -short -fasta /Users/stc/genomics_project/kmers/test01.fasta
velvetg /Users/stc/genomics_project/velvet
# fail, no result



# run MSA
R
library(DECIPHER)
seq <- readDNAStringSet('/Users/stc/genomics_project/kmers/test01.fasta')
alignedDNA <- AlignSeqs(seq, processors=NULL, verbose=FALSE, gapOpening=-6)
BrowseSeqs(alignedDNA)



# write script to 
# Read input fasta.gz
# calculate frequency of each kmer with sliding window and store in multidimensional matrix
# correct abundance with background (expected)
# output fasta files, each contain kmers that have the same corrected abundance
# plot the rank abundance curve

# test run
cd ~/genomics_project
./get_kmer_fasta.1.py --in_file=/Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=/Users/stc/genomics_project/fasta.gz/15955/ --k=12 --n_permute=3



### AWS EC ###

# first launch a free instance type t2.micro
# us-east-2b
# key: cpcb2021.cer
# Ohio

# big memory instance: x2iedn.4xlarge (512 GB)

ssh -i cpcb2021.cer ubuntu@3.139.74.140

df -h
# 28G space 

# install anaconda for linux
https://docs.anaconda.com/anaconda/install/linux/

# install biopython
conda install -c conda-forge biopython



<date>2022/04/21</date>

# test run
time ./get_kmer_fasta.2.py --in_file=/Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=/Users/stc/genomics_project/15955/ --k=12 --n_permute=30


# test runtime and memory usage on my MacBook Pro
strain  k   n   time    peak_memory
15955   11  1   1:40    1GB
15955   12  1   2:13    4GB
15955   13  1   3:35    17GB
15955	12	10	8:12	4GB


# k=20 will require 4^9GB memory

# create a list for running all genomes with loop
vim strain.list
GCF_002591665.3_ASM259166v3_genomic.fna.gz	186
GCF_002943835.1_ASM294383v1_genomic.fna.gz	1D1609
GCF_003666425.1_ASM366642v1_genomic.fna.gz	1D1108
GCF_003666445.1_ASM366644v1_genomic.fna.gz	1D1460
GCF_003666465.1_ASM366646v1_genomic.fna.gz	15955
GCF_003667905.1_ASM366790v1_genomic.fna.gz	12D1
GCF_003667925.1_ASM366792v1_genomic.fna.gz	A6
GCF_005221325.1_ASM522132v1_genomic.fna.gz	CFBP5499
GCF_005221345.1_ASM522134v1_genomic.fna.gz	CFBP5877
GCF_005221385.1_ASM522138v1_genomic.fna.gz	CFBP6623
GCF_005221405.1_ASM522140v1_genomic.fna.gz	CFBP7129
GCF_005221425.1_ASM522142v1_genomic.fna.gz	CFBP6624
GCF_014489975.1_ASM1448997v1_genomic.fna.gz	BIMB1315G
GCF_016403145.1_ASM1640314v1_genomic.fna.gz	FDAARGOS_1048
GCF_017726655.1_ASM1772665v1_genomic.fna.gz	6N2

# run overnight
while IFS=$'\t' read -r -a line
do
echo "${line[1]}"
time ./get_kmer_fasta.2.py --in_file=/Users/stc/genomics_project/fasta.gz/${line[0]} --out_dir=/Users/stc/genomics_project/${line[1]}/ --k=12 --n_permute=100 > /Users/stc/genomics_project/${line[1]}.log
done < strain.list > get_kmer_fasta.log

# start at 5:39

# #SBATCH -p big_memory

# test
time ./get_kmer_fasta.3.py --in_file=/Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=/Users/stc/genomics_project/15955/ --k=12 --n_permute=1

strain	k	n	c	time	peak_memory
15955	12	1	30	3:05	4GB
15955	13	1	30	5:08    17GB
15955	12	10	30	11:45	4GB



scp -pr ~/genomics_project/fasta.gz/ shc167@cluster.csb.pitt.edu:~/genomics_project/
scp -pr ~/genomics_project/get_kmer_fasta.3.py shc167@cluster.csb.pitt.edu:~/genomics_project/
scp -pr ~/genomics_project/strain.list shc167@cluster.csb.pitt.edu:~/genomics_project/



mkdir -p ~/genomics_project/get_kmer_fasta/run1/


cd ~/genomics_project/get_kmer_fasta/
vim get_kmer_fasta.slurm
"""
#!/bin/bash

#SBATCH -J genomics
#SBATCH -p big_memory
#SBATCH --exclude=n036,n007
#SBATCH -c 1

# setup SCRDIR
SCRDIR=/scr/${SLURM_JOB_ID}
mkdir /scr/${SLURM_JOB_ID}
cd $SCRDIR

save_dir=~/genomics_project/get_kmer_fasta/run1/

rsync -av ~/genomics_project/fasta.gz ~/genomics_project/get_kmer_fasta.3.py ~/genomics_project/strain.list ${SCRDIR}/

pip3 install biopython

time ./get_kmer_fasta.3.py --in_file=./fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=./15955/ --k=16 --n_permute=1 > 15955.log

# while IFS=$'\t' read -r -a line
# do
# echo "${line[1]}"
# time ./get_kmer_fasta.2.py --in_file=${SCRDIR}/fasta.gz/${line[0]} --out_dir=${SCRDIR}/${line[1]}/ --k=16 --n_permute=1 > ${SCRDIR}/${line[1]}.log
# mv ${line[1]} ${line[1]}.log $save_dir
# done < strain.list


# this line will mv txt files back on any exit condition
trap "mv * $save_dir ; rm -r *" EXIT

# echo information
echo $SLURM_SUBMIT_DIR
echo $SLURMD_NODENAME
echo $SLURM_JOB_ID
"""

cd ~/genomics_project/get_kmer_fasta/
sbatch get_kmer_fasta.slurm






# modify script to plot scatter
"""
#!/bin/bash

#SBATCH -J genomics
#SBATCH -p big_memory
#SBATCH -w n201
#SBATCH -c 1

# setup SCRDIR
SCRDIR=/scr/${SLURM_JOB_ID}
mkdir /scr/${SLURM_JOB_ID}
cd $SCRDIR

save_dir=~/genomics_project/get_kmer_fasta/run1/

rsync -av ~/genomics_project/fasta.gz ~/genomics_project/get_kmer_fasta.5.py ~/genomics_project/strain.list ${SCRDIR}/

module load anaconda

time ./get_kmer_fasta.5.py --in_file=./fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=./15955/ --k=16 --n_permute=1 > 15955.log

# this line will mv txt files back on any exit condition
trap "rsync -av 15955 15955.log $save_dir ;" EXIT

# echo information
echo $SLURM_SUBMIT_DIR
echo $SLURMD_NODENAME
echo $SLURM_JOB_ID
"""




ssh n202
htop -u shc167



scp -pr shc167@cluster.csb.pitt.edu:~/genomics_project/get_kmer_fasta/run1/15955/rank_abundance.png ./




vim get_kmer_fasta.1.slurm
#!/bin/bash

#SBATCH -J genomics
#SBATCH -p big_memory
#SBATCH -w n201
#SBATCH -c 1

# setup SCRDIR
SCRDIR=/scr/${SLURM_JOB_ID}
mkdir /scr/${SLURM_JOB_ID}
cd $SCRDIR

save_dir=~/genomics_project/get_kmer_fasta/run2/

rsync -av ~/genomics_project/fasta.gz ~/genomics_project/get_kmer_fasta.5.py ~/genomics_project/strain.1.list ${SCRDIR}/

module load anaconda

while IFS=$'\t' read -r -a line
do
echo "${line[1]}"
time ./get_kmer_fasta.5.py --in_file=fasta.gz/${line[0]} --out_dir=${line[1]}/ --k=15 --n_permute=100 > ${line[1]}.log
rsync -av ${line[1]} ${line[1]}.log $save_dir
done < strain.1.list

# this line will mv txt files back on any exit condition
trap "rsync -av 186 1D1609 1D1108 1D1460 15955 12D1 A6 *.log $save_dir ;" EXIT

# echo information
echo $SLURM_SUBMIT_DIR
echo $SLURMD_NODENAME
echo $SLURM_JOB_ID






vim get_kmer_fasta.2.slurm
#!/bin/bash

#SBATCH -J genomics
#SBATCH -p big_memory
#SBATCH -w n202
#SBATCH -c 1

# setup SCRDIR
SCRDIR=/scr/${SLURM_JOB_ID}
mkdir /scr/${SLURM_JOB_ID}
cd $SCRDIR

save_dir=~/genomics_project/get_kmer_fasta/run2/

rsync -av ~/genomics_project/fasta.gz ~/genomics_project/get_kmer_fasta.5.py ~/genomics_project/strain.2.list ${SCRDIR}/

module load anaconda

while IFS=$'\t' read -r -a line
do
echo "${line[1]}"
time ./get_kmer_fasta.5.py --in_file=fasta.gz/${line[0]} --out_dir=${line[1]}/ --k=15 --n_permute=100 > ${line[1]}.log;
rsync -av ${line[1]} ${line[1]}.log $save_dir
done < strain.2.list

# this line will mv txt files back on any exit condition
trap "rsync -av CFBP5499 CFBP5877 CFBP6623 CFBP7129 CFBP6624 BIMB1315G FDAARGOS_1048 6N2 *.log $save_dir ;" EXIT

# echo information
echo $SLURM_SUBMIT_DIR
echo $SLURMD_NODENAME
echo $SLURM_JOB_ID


./get_kmer_fasta.6.py --in_file=/Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz --out_dir=/Users/stc/genomics_project/run3/ --k=12 --n_permute=10 > /Users/stc/genomics_project/run3/15955.log;


scp -pr shc167@cluster.csb.pitt.edu:/net/dali/home/mscbio/shc167/genomics_project/get_kmer_fasta/run2 ./





#### 15955 #####
cd /Users/stc/genomics_project/run2/15955
cat kmers_*.fasta > 15955.kmers.fasta
grep -c '>' 15955.kmers.fasta 
419476


# ref genome: /Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz
# kmer seqs: /Users/stc/genomics_project/run2/15955/15955.kmers.fasta


# prepare working dir
mkdir -p /Users/stc/genomics_project/mapping/15955/bwa
cp /Users/stc/genomics_project/fasta.gz/GCF_003666465.1_ASM366646v1_genomic.fna.gz /Users/stc/genomics_project/mapping/15955/
cd /Users/stc/genomics_project/mapping/15955/
gzip -d GCF_003666465.1_ASM366646v1_genomic.fna.gz

# Index the reference sequences

## bwa index
bwa index -a is /Users/stc/genomics_project/mapping/15955/GCF_003666465.1_ASM366646v1_genomic.fna


## index reference sequence in the FASTA format
samtools faidx /Users/stc/genomics_project/mapping/15955/GCF_003666465.1_ASM366646v1_genomic.fna

# Map the kmers (reads) to the reference sequences
bwa mem -p -k 11 -T 13 /Users/stc/genomics_project/mapping/15955/GCF_003666465.1_ASM366646v1_genomic.fna /Users/stc/genomics_project/run2/15955/15955.kmers.fasta 2> /Users/stc/genomics_project/mapping/15955/bwa/log | samtools view -Su - | samtools sort -m 30000000000 -o /Users/stc/genomics_project/mapping/15955/kmers.bam ;
samtools index /Users/stc/genomics_project/mapping/15955/kmers.bam &

samtools depth /Users/stc/genomics_project/mapping/15955/kmers.bam > /Users/stc/genomics_project/mapping/15955/15955.depth;


awk '{FS=OFS="\t"} NR==1 {a=$2;b=$2;ID=$1;next} ($2 != b+1){print ID, a, b; a=$2;ID=$1} {b=$2} END{print ID, a, b}' /Users/stc/genomics_project/mapping/15955/15955.depth > /Users/stc/genomics_project/mapping/15955/repeat_regions.list


mkdir /Users/stc/genomics_project/mapping

awk '{FS=OFS="\t"} {$4=$3-$2+1; print $0}' 15955_repeat_regions.list | awk '$4>=100' | sort -nrk 4 > 15955_repeat_regions.fs.list

python /Users/stc/genomics_project/mapping/extract_region.1.py /Users/stc/genomics_project/mapping/15955/GCF_003666465.1_ASM366646v1_genomic.fna /Users/stc/genomics_project/mapping/15955/15955_repeat_regions.fs.list /Users/stc/genomics_project/mapping/15955/15955_repeat_regions.fs.fasta






### A6 ###





#### Hierarchical Cluster Analysis
# input: repeat comparison table
/Users/shc167/genomics_project/repeat.tsv
df <- read.table(file = '/Users/shc167/genomics_project/repeat.tsv', sep = '\t', header = TRUE, row.names = 1)

df_scaled <- scale(df, center = TRUE, scale = TRUE)

# find distance matrix 
d <- dist(df_scaled)

# apply hirarchical clustering 
hc <- hclust(d)

# plot the dendrogram
plot(hc)


df1 <- read.table(file = '/Users/shc167/genomics_project/repeat.1.tsv', sep = '\t', header = TRUE, row.names = 1)
d <- dist(df1)
hc <- hclust(d)
plot(hc)




df1 <- read.table(file = '/Users/shc167/genomics_project/repeat.1.tsv', sep = '\t', header = TRUE, row.names = 1)


for ID in 12D1 15955 186 1D1108 1D1460 1D1609 6N2 A6 BIMB1315G CFBP5499 CFBP5877 CFBP6623 CFBP6624 CFBP7129 FDAARGOS_1048
do
awk '$5>=4' ${ID}/kmer_table.tsv > ${ID}_kmer_table.4.tsv 
done


df_A6 <- read.table(file = '/Users/shc167/genomics_project/run2/A6_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_12D1 <- read.table(file = '/Users/shc167/genomics_project/run2/12D1_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_15955 <- read.table(file = '/Users/shc167/genomics_project/run2/15955_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_186 <- read.table(file = '/Users/shc167/genomics_project/run2/186_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_1D1108 <- read.table(file = '/Users/shc167/genomics_project/run2/1D1108_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)

df_1D1460 <- read.table(file = '/Users/shc167/genomics_project/run2/1D1460_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_6N2 <- read.table(file = '/Users/shc167/genomics_project/run2/6N2_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_BIMB1315G <- read.table(file = '/Users/shc167/genomics_project/run2/BIMB1315G_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_CFBP5499 <- read.table(file = '/Users/shc167/genomics_project/run2/CFBP5499_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_CFBP5877 <- read.table(file = '/Users/shc167/genomics_project/run2/CFBP5877_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)

df_CFBP6623 <- read.table(file = '/Users/shc167/genomics_project/run2/CFBP6623_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_CFBP6624 <- read.table(file = '/Users/shc167/genomics_project/run2/CFBP6624_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_CFBP7129 <- read.table(file = '/Users/shc167/genomics_project/run2/CFBP7129_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_FDAARGOS_1048 <- read.table(file = '/Users/shc167/genomics_project/run2/FDAARGOS_1048_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)
df_1D1609 <- read.table(file = '/Users/shc167/genomics_project/run2/1D1609_kmer_table.4.tsv', sep = '\t', header = TRUE, row.names = 1)

G1_A6 <- df_A6$corrected
G1_1D1108 <- df_1D1108$corrected
G1_FDAARGOS_1048 <- df_FDAARGOS_1048$corrected
G1_15955 <- df_15955$corrected

G3_CFBP6623 <- df_CFBP6623$corrected
G3_CFBP6624 <- df_CFBP6624$corrected

G7_1D1609 <- df_1D1609$corrected
G7_CFBP7129 <- df_CFBP7129$corrected

G6_CFBP5499 <- df_CFBP5499$corrected
G6_CFBP5877 <- df_CFBP5877$corrected

G4_6N2 <- df_6N2$corrected
G4_186 <- df_186$corrected
G4_12D1 <- df_12D1$corrected
G4_1D1460 <- df_1D1460$corrected
G4_BIMB1315G <- df_BIMB1315G$corrected







vioplot(G1_1D1108, G1_FDAARGOS_1048, G1_A6, G3_CFBP6623, G3_CFBP6624, G7_1D1609, G7_CFBP7129, G6_CFBP5499, G6_CFBP5877, G4_6N2, G4_186, G4_12D1, G4_1D1460, G4_BIMB1315G)

myColors <- c(brewer.pal(5, "Blues")[2:5], brewer.pal(3, "Greens")[2:3], brewer.pal(3, "PuRd")[2:3], brewer.pal(3, "Greys")[2:3], brewer.pal(6, "YlOrBr")[2:6])

vioplot(G1_1D1108, G1_FDAARGOS_1048, G1_15955, G1_A6, G3_CFBP6623, G3_CFBP6624, G7_1D1609, G7_CFBP7129, G6_CFBP5499, G6_CFBP5877, G4_6N2, G4_186, G4_12D1, G4_1D1460, G4_BIMB1315G, names=c("1D1108", "FDAARGOS 1048", "15955", "A6", "CFBP6623", "CFBP6624", "1D1609", "CFBP7129", "CFBP5499", "CFBP5877", "6N2", "186", "12D1", "1D1460", "BIMB1315G"), col=myColors,xlab="Strains", ylab="Frequencies", main="Distribution of Kmer Frequencies")








c("G1_1D1108", "G1_A6", "G1_FDAARGOS_1048", "G1_A6", "G3_CFBP6623", "G3_CFBP6624", "G7_1D1609", "G7_CFBP7129", "G6_CFBP5499", "G6_CFBP5877", "G4_6N2", "G4_186", "G4_12D1", "G4_1D1460", "G4_BIMB1315G")



vioplot(G3_CFBP6623, G3_CFBP6624)

Blues, Greens, PuRd, Greys, YlOrBr



# run MSA
R
library(DECIPHER)
seq <- readDNAStringSet('/Users/stc/genomics_project/kmers/test01.fasta')
alignedDNA <- AlignSeqs(seq, processors=NULL, verbose=FALSE, gapOpening=-6)
BrowseSeqs(alignedDNA)






# add intergenic high copy number 132bp

#### Hierarchical Cluster Analysis
# input: repeat comparison table
df <- read.table(file = '/Users/stc/genomics_project/repeat_compare.3.tsv', sep = '\t', header = TRUE, row.names = 1)

df_scaled <- scale(df, center = TRUE, scale = TRUE)

# find distance matrix 
d <- dist(df_scaled)

# apply hirarchical clustering 
hc <- hclust(d)

# plot the dendrogram
plot(hc)